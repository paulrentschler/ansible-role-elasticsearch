#
# {{ ansible_managed }}
#
# This file was generated by Ansible for {{ inventory_hostname }}
# Do NOT modify this file by hand!
#


# This file contains an overview of various configuration settings,
# targeted at operations staff. Application developers should
# consult the guide at <http://elasticsearch.org/guide>.


################################ Introduction #################################
#
# ElasticSearch comes with reasonable defaults for most settings. Most of the
# time, these defaults are just fine for running a production cluster. If
# you're fine-tuning your cluster, or wondering about the effect of certain
# configuration option, please _do ask_ on the mailing list or IRC
# channel (http://elasticsearch.org/community).

# Any element in the configuration can be replaced with environment variables
# by placing them in ${...} notation. For example:
#
# node.rack: ${RACK_ENV_VAR}

# For information on supported formats and syntax for the config file, see
# http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html


################################### Cluster ###################################

# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.

cluster.name: {{ elasticsearch_cluster_name }}


#################################### Node #####################################

# Node names are generated dynamically on startup or can be specified.

node.name: {{ elasticsearch_node.name }}

# Every node can be configured to allow or deny being eligible as the primary,
# and to allow or deny to store the data.
#
# Allow this node to be eligible as a primary node:

{% if elasticsearch_node.primary|bool %}
node.master: true
{% else %}
node.master: false
{% endif %}

# Allow this node to store data (enabled by default):

{% if elasticsearch_node.data|bool %}
node.data: true
{% else %}
node.data: false
{% endif %}


# Use the Cluster Health API [http://localhost:9200/_cluster/health], the
# Node Info API [http://localhost:9200/_cluster/nodes] or GUI tools
# such as <http://www.elasticsearch.org/overview/marvel/>,
# <http://github.com/karmi/elasticsearch-paramedic>,
# <http://github.com/lukas-vlcek/bigdesk> and
# <http://mobz.github.com/elasticsearch-head> to inspect the cluster state.

# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:
#
# node.rack: rack314

# By default, multiple nodes are allowed to start from the same installation location
# to disable it, set the following:
# node.max_local_storage_nodes: 1


#################################### Index ####################################

# Set the number of shards (splits) of an index (5 by default):
index.number_of_shards: {{ elasticsearch_index.shards }}

# Set the number of replicas (additional copies) of an index (1 by default):
index.number_of_replicas: {{ elasticsearch_index.replicas }}


################################## Security ###################################

# Dynamic scripts are bad and just asking to be abused by "bad people"
script.disable_dynamic: true

# This prevents certain bulk commands from being able to specify the index
# in the command body instead of as part of the URL where it's easier to filter
rest.action.multi.allow_explicit_index: true

# Prevent indices from being deleted
#action.disable_delete_all_indices: true


#################################### Paths ####################################

# Path to directory containing configuration (this file and logging.yml):
# path.conf: /etc/elasticsearch

# Path to directory where to store index data allocated for this node.
# path.data: /var/lib/elasticsearch
#
# Can optionally include more than one location, causing data to be striped across
# the locations (a la RAID 0) on a file level, favouring locations with most free
# space on creation. For example:
#    path.data: /path/to/data1,/path/to/data2

# Path to temporary files:
# path.work: /tmp/elasticsearch

# Path to log files:
# path.logs: /var/log/elasticsearch

# Path to where plugins are installed:
# path.plugins: /usr/share/elasticsearch/plugins


#################################### Plugin ###################################

# If a plugin listed here is not installed for current node, the node will not start.
{% if elasticsearch_node.mandatory_plugins != "" %}
plugin.mandatory: {{ elasticsearch_node.mandatory_plugins }}
{% endif %}


################################### Memory ####################################

# ElasticSearch performs poorly when JVM starts swapping
# Set this property to true to lock the memory
{% if elasticsearch_mlockall|bool %}
bootstrap.mlockall: true
{% else %}
bootstrap.mlockall: false
{% endif %}

# Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for ElasticSearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the ElasticSearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.


############################## Network And HTTP ###############################

# ElasticSearch, by default, binds itself to the 0.0.0.0 address, and listens
# on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node
# communication. (the range means that if the port is busy,
# it will automatically try the next port).

# Set the bind address specifically (IPv4 or IPv6):
#network.bind_host: 192.168.0.1

# Set the address other nodes will use to communicate with this node. If not
# set, it is automatically derived. It must point to an actual IP address.
#network.publish_host: 192.168.0.1

# Set both 'bind_host' and 'publish_host' (node-to-node communications):
network.host: {{ elasticsearch_network.host }}

# Set the host to bind to for HTTP traffic:
http.host: {{ elasticsearch_network.http_host }}

# Set a custom port for the node to node communication (9300 by default):
#transport.tcp.port: 9300

# Enable compression for all communication between nodes (disabled by default):
#transport.tcp.compress: true

# Set a custom port to listen for HTTP traffic:
#http.port: 9200

# Set a custom allowed content length:
#http.max_content_length: 100mb

# Disable HTTP completely:
#http.enabled: false


################################### Gateway ###################################

# The gateway allows for persisting the cluster state between full cluster
# restarts. Every change to the state (such as adding an index) will be stored
# in the gateway, and when the cluster starts up for the first time,
# it will read its state from the gateway.

# There are several types of gateway implementations. For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html>.

# The default gateway type is the "local" gateway (recommended):
#gateway.type: local

# Settings below control how and when to start the initial recovery process on
# a full cluster restart (to reuse as much local data as possible when using
# shared gateway).

# Allow recovery process after N nodes in a cluster are up:
#gateway.recover_after_nodes: 1

# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):
#gateway.recover_after_time: 5m

# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):
#gateway.expected_nodes: 2


############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc
#cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default 20mb):
#indices.recovery.max_bytes_per_sec: 20mb

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:
#indices.recovery.concurrent_streams: 5


################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. Its recommended to set it to a higher value
# than 1 when running more than 2 nodes in the cluster.
#discovery.zen.minimum_master_nodes: 1

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#discovery.zen.ping.timeout: 3s

# For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html>

# Unicast discovery allows to explicitly control which nodes will be used
# to discover the cluster. It can be used when multicast is not present,
# or to restrict the cluster communication-wise.
#
# 1. Disable multicast discovery (enabled by default):
discovery.zen.ping.multicast.enabled: false
#
# 2. Configure an initial list of master nodes in the cluster
#    to perform discovery when new nodes (master or data) are started:
discovery.zen.ping.unicast.hosts: [{%
    for _host in groups[elasticsearch_discovery_ansible_group]
        %} "{{ hostvars[_host][elasticsearch_network.unicast_interface]['ipv4']['address'] }}"{% if not loop.last %}, {% endif %} {%
    endfor
%}]

# EC2 discovery allows to use AWS EC2 API in order to perform discovery.
#
# You have to install the cloud-aws plugin for enabling the EC2 discovery.
#
# For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html>
#
# See <http://elasticsearch.org/tutorials/elasticsearch-on-ec2/>
# for a step-by-step tutorial.

# GCE discovery allows to use Google Compute Engine API in order to perform discovery.
#
# You have to install the cloud-gce plugin for enabling the GCE discovery.
#
# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-gce>.

# Azure discovery allows to use Azure API in order to perform discovery.
#
# You have to install the cloud-azure plugin for enabling the Azure discovery.
#
# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-azure>.


################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

#index.search.slowlog.threshold.query.warn: 10s
#index.search.slowlog.threshold.query.info: 5s
#index.search.slowlog.threshold.query.debug: 2s
#index.search.slowlog.threshold.query.trace: 500ms

#index.search.slowlog.threshold.fetch.warn: 1s
#index.search.slowlog.threshold.fetch.info: 800ms
#index.search.slowlog.threshold.fetch.debug: 500ms
#index.search.slowlog.threshold.fetch.trace: 200ms

#index.indexing.slowlog.threshold.index.warn: 10s
#index.indexing.slowlog.threshold.index.info: 5s
#index.indexing.slowlog.threshold.index.debug: 2s
#index.indexing.slowlog.threshold.index.trace: 500ms


################################## GC Logging ################################

#monitor.jvm.gc.young.warn: 1000ms
#monitor.jvm.gc.young.info: 700ms
#monitor.jvm.gc.young.debug: 400ms

#monitor.jvm.gc.old.warn: 10s
#monitor.jvm.gc.old.info: 5s
#monitor.jvm.gc.old.debug: 2s
